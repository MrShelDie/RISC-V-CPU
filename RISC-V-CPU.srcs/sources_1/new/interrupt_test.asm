# Инициализируем начальные значения регистров
li sp, 0x3FC					# Устанавливаем указатель на верхушку стека
li gp, 0x1FC					# Устанавливаем указатель на глобальные данные

li t0, 0x00080020				# Подготавливаем маску прерывания для 5 и 19 входов
csrw mie, t0					# Загружаем маску в регистр маски
#la t0, interrupt				# Аналогично li загружаем число, в данном случае - адрес
auipc t0, interrupt             # Загружаем адрес обработчика прерываний
addi t0, t0, 40
csrw mtvec, t0					# Устанавливаем вектор прерывания
li t0, 0x2FC					# Готовим адрес верхушки стека прерывания
csrw mscratch, t0				# Загружаем указатель на верхушку стека прерывания

li t0, 0						# Начальное значение глобальной переменной
sw t0, 0(gp)					# Загружаем переменную в память

li t1, 0						# Начальное значение, чтобы в симуляции не было xxx
li t2, 0						# Начальное значение, чтобы в симуляции не было xxx

while:							# Бесконечный цикл
	beq x0, x0, while
    
# Обработчик прерывания
interrupt:
	# Сохраняем используемые регистры на стек
	csrrw t0, mscratch, t0		# Меняем местами mscratch и t0
    sw t1, 0(t0)				# Сохраняем t1 на стек mscratch
    sw t2, -4(t0)				# Сохраняем t2 на стек mscratch

int5:
	# Проверяем ристр причины на 5-ое прерывание
    csrr t1, mcause				# t1 = mcause
    li t2, 5					# t2 = 5 (код одного из прерываний)
    bne t1, t2, int19		 	# если это не 5 прерывание, то проверяем 19
    
	# Обработчик 5-го прерывания
	lw t2, 0(gp)				# Загружаем переменную из памяти
    addi t2, t2, 3				# Прибавляем к значению 3
    sw t2, 0(gp)				# Возвращаем переменную в память
    j done						# Идём возвращать регистры и на выход

int19:
	# Проверяем 19-ое прерывание
    li t2, 19					# t2 = 19 (код другого прерывания)
    bne t1, t2, done			# если не 19-ое, то выходим
    
    # Обработчик 19-го прерывания
    lw t2, 0(gp)				# Загружаем переменную из памяти
    srli t2, t2, 1				# Делим число пополам сдвигом вправо
    sw t2, 0(gp)				# Возвращаем переменную в память
    j done						# Идём возвращать регистры и на выход
    
done:
	# Возвращаем регистры на свои места и выходим
    lw t1, 0(t0)				# Возвращаем t1 со стека
    lw t1, -4(t0)				# Возвращаем t2 со стека
    csrrw t0, mscratch, t0		# Меняем обратно местами t0 и mscratch
    mret						# Возвращаем управление программе (pc = mepc)